var Achievement = function() {
  this.Init();
};

Achievement.prototype.Init = function() {
};

Achievement.Create = function(game) {
};

var Item = function(game, cost, level, defenseStat, movespeedStat, damageStat, attackrateStat, income, upgrades) {
  this.Init(game, cost, level, defenseStat, movespeedStat, damageStat, attackrateStat, income, upgrades);
};

Item.prototype.Init = function(game, cost, level, defenseStat, movespeedStat, damageStat, attackrateStat, income, upgrades) {
  this.game = game;
  this.level = level;
  this.startCost = cost;
  this.defenseStat = defenseStat;
  this.movespeedStat = movespeedStat;
  this.damageStat = damageStat;
  this.attackrateStat = attackrateStat;
  this.income = income;

  this.unlock = function(game) {
    return game.level >= this.level;
  };

  this.status = LOCKED;
  this.count = 0;

  this.upgrades = upgrades;
  this.upgradesPurchased = [];
  this.upgradesAvailable = [];
  this.upgradeActive = null;
  this.upgradeCooldown = 0;

  this.cost = this.calculatePurchaseCost(1);
  this.cost10 = this.calculatePurchaseCost(10);
  this.cost100 = this.calculatePurchaseCost(100);
  this.cost1000 = this.calculatePurchaseCost(1000);
};

Item.prototype.calculateTotalCost  = function(n) {
  return (this.startCost * SCALE_ITEM_COST * ((Math.pow(n, 3) - n) / 6) + n * this.startCost) * this.game.upgradeStats.priceBonus;
};

Item.prototype.calculatePurchaseCost = function(n) {
  return this.calculateTotalCost(n + this.count) - this.calculateTotalCost(this.count);
};

Item.prototype.getItemText = function() {
  if (this.upgradeActive == WITS_END)
    return this.game.upgradeStats.witCount + '';
  else  if (this.upgradeActive == STATIKK_SHIV)
    return this.game.upgradeStats.statikkCount + '';
  else if (this.upgradeActive == LUDENS_ECHO)
    return this.game.upgradeStats.ludenCount + '';
  return '';
};

Item.prototype.getItemClass = function() {
  if (this.upgradeActive == WITS_END)
    return 'wits';
  else  if (this.upgradeActive == STATIKK_SHIV)
    return 'statikk';
  else if (this.upgradeActive == LUDENS_ECHO)
    return 'ludens';
  return '';
};

Item.convertUpgradeToIndex = function(upgrades) {
  var result = [];
  var len = upgrades.length;
  var i = 0;
  while (i < len) {
    result.push(upgradeToIndex(upgrades[i]));
    i++;
  }
  return result;
};

Item.convertIndexToUpgrade = function(indices) {
  var result = [];
  var len = indices.length;
  var i = 0;
  while (i < len) {
    result.push(indexToUpgrade(indices[i]));
    i++;
  }
  return result;
};

Item.Create = function(game) {
  var items = {};

  items[RELIC_SHIELD] = new Item(game, 250, 1,      2,  0, 0,  0, 1, [TARGONS_BRACE, FACE_OF_THE_MOUNTAIN]);
  items[ANCIENT_COIN] = new Item(game, 250, 1,      0,  0, 0,  0, 5, [NOMADS_MEDALLION, TALISMAN_OF_ASCENSION]);
  items[SPELLTHIEFS_EDGE] = new Item(game, 250, 1,  0,  0, 10, 0, 3, [FROSTFANG, FROST_QUEENS_CLAIM]);
  items[BOOTS_OF_SPEED] = new Item(game, 750, 2,    0,  1, 0,  0, 0, [BOOTS_OF_SWIFTNESS, NINJA_TABI, IONIAN_BOOTS_OF_LUCIDITY, BOOTS_OF_MOBILITY, MERCURYS_TREADS, SORCERERS_SHOES, BERSERKERS_GREAVES]);
  items[RUBY_CRYSTAL] = new Item(game, 750, 2,      10, 0, 0,  0, 0, [CRYSTALLINE_BRACER, KINDLEGEM, GIANTS_BELT, WARMOGS_ARMOR, RIGHTEOUS_GLORY, SPIRIT_VISAGE, FROZEN_MALLET]);
  items[AMPLIFYING_TOME] = new Item(game, 2000, 3,  0,  0, 50, 0, 0, [FIENDISH_CODEX, AETHER_WISP, NEEDLESSLY_LARGE_ROD, MORELLONOMICON, LUDENS_ECHO, RYLAIS_CRYSTAL_SCEPTER, RABADONS_DEATHCAP]);
  items[DAGGER] = new Item(game, 3000, 3,           0,  0, 0,  1, 0, [RECURVE_BOW, RUNAANS_HURRICANE, ZEAL, WITS_END, STATIKK_SHIV, PHANTOM_DANCER, TRINITY_FORCE]);

  return items;
};

var Mastery = function() {
  this.Init();
};

Mastery.prototype.Init = function() {
};

Mastery.Create = function(game) {
};

var Monster = function(game, level, health, experience, gold, type) {
  this.Init(game, level, health, experience, gold, type);
};

Monster.prototype.Init = function(game, level, health, experience, gold, type) {
  this.game = game;
  this.level = level;
  this.maxHealth = health;
  this.currentHealth = health;
  this.experience = experience;
  this.gold = gold;
  this.type = type;

  this.startHealth = health;
  this.startExperience = experience;
  this.startGold = gold;

  this.count = 0;
  this.status = LOCKED;
};

Monster.Create = function(game) {
  var monsters = {};
  var monster;
  var baseHealth;
  var scaleHealth;
  var totalHealth;
  var scaleExp;
  var scaleReward;
  var type;
  var i;
  var len = MONSTERS.length;
  for (i = 0; i < len; i++) {
    monster = MONSTERS[i];
    baseHealth = MONSTER_HEALTH + 12 * Math.pow(i, 2) + 25 * i;
    scaleHealth = Math.pow(game.scaleMonsterLevelHealth, i);
    totalHealth = Math.floor(baseHealth * scaleHealth);
    scaleExp = Math.pow(SCALE_MONSTER_LEVEL_REWARD, i);
    scaleReward = Math.pow(SCALE_MONSTER_LEVEL_REWARD, i);
    if (i == len - 1) {
      var health = totalHealth * 15;
      var healthPower = Math.floor(getBaseLog(10, health));
      var newHealth = Math.pow(10, healthPower) * (1.11111).toFixed(2 + healthPower % 3);
      newHealth = Math.ceil(health / newHealth) * newHealth;

      totalHealth =  newHealth;
      scaleExp = 999990000000000000 / MONSTER_EXPERIENCE;
      scaleReward = 999990000000000 / MONSTER_REWARD;
    }

    type = game.isMonsterChampion(monster) ? MONSTER_CHAMPION : MONSTER_JUNGLE;
    monsters[monster] = new Monster(game, i + 1, totalHealth,
                                                 MONSTER_EXPERIENCE * scaleExp + 10 * (i + 1),
                                                 MONSTER_REWARD * scaleReward + 10 * (i + 1),
                                                 type);
  }
  return monsters;
};

var Rune = function (game, type, name, tier, difficulty, apply, tooltip) {
  this.Init(game, type, name, tier, difficulty, apply, tooltip);
};
Rune.prototype.Init = function (game, type, name, tier, difficulty, apply, tooltip) {
  this.game = game;
  this.type = type;
  this.name = name;
  this.tier = tier;
  this.difficulty = difficulty;
  this.apply = apply;
  this.tooltip = tooltip;
  this.fullName = type.capitalize() + ' of ' + name;
  this.cost = RUNE_PRICES[difficulty] * Math.pow(10, tier - 1) * (type == QUINT ? 4 : 1);
  this.status = LOCKED;
  this.purchased = 0;
  this.count = 0;
  this.active = 0;
  this.image = Rune.GetImageName(this);
  this.unlock = function (game) {
    return DIFFICULTIES.indexOf(game.difficulty) >= DIFFICULTIES.indexOf(this.difficulty);
  };
};
Rune.prototype.getLockedText = function () {
  return 'Unlock by completing <b>' + this.difficulty.capitalize() + '</b>';
};
Rune.prototype.getPurchasedPercent = function () {
  if (!this.purchased)
    return 0;
  return 100 * this.purchased / (this.type == QUINT ? 3 : 9);
};
Rune.prototype.getActivePercent = function () {
  if (!this.purchased)
    return 0;
  return 100 * this.count / this.purchased;
};
Rune.GetImageName = function (rune) {
  var s = '';
  if (rune.type == MARK) {
    s += 'r_';
    if (rune.difficulty == 'medium')
      s += '1_';
    else if (rune.difficulty == 'hard')
      s += '2_';
    else if (rune.difficulty == 'marathon')
      s += '4_';
  } else if (rune.type == SEAL) {
    s += 'y_';
    if (rune.difficulty == 'medium')
      s += '1_';
    else if (rune.difficulty == 'hard')
      s += '2_';
    else if (rune.difficulty == 'marathon')
      s += '3_';
  } else if (rune.type == GLYPH) {
    s += 'b_';
    if (rune.difficulty == 'medium')
      s += '3_';
    else if (rune.difficulty == 'hard')
      s += '1_';
    else if (rune.difficulty == 'marathon')
      s += '2_';
  } else if (rune.type == QUINT) {
    s += 'bl_';
    if (rune.difficulty == 'hard')
      s += '3_';
    else if (rune.difficulty == 'marathon')
      s += '2_';
    else if (rune.difficulty == 'impossible')
      s += '1_';
  }
  s += rune.tier;
  return s;
};
Rune.CreateSet = function (game, type, name, difficulty, applyFunc, tooltipFunc) {
  var set = {};
  for (var i = 1; i <= 3; i++)
    set[i] = new Rune(game, type, name, i, difficulty, applyFunc(i), tooltipFunc(i));
  return set;
};
Rune.Create = function (game) {
  var runes = {};
  // Marks
  var marks = {};
  marks[DAMAGE] = Rune.CreateSet(game, MARK, DAMAGE, 'medium', function (i) {
    return function (obj, num) {
      obj.damage += num * 15 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 15 * i + ' Damage';
    };
  });
  marks[ATTACKRATE] = Rune.CreateSet(game, MARK, ATTACKRATE, 'medium', function (i) {
    return function (obj, num) {
      obj.attackrate += num * 0.5 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 0.5 * i + ' Attack Rate';
    };
  });
  marks[MONSTER_CLICKING] = Rune.CreateSet(game, MARK, MONSTER_CLICKING, 'medium', function (i) {
    return function (obj, num) {
      obj.monsterClicking += num * 0.04 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 4 * i + '% Damage per click';
    };
  });
  marks[SCALING_DAMAGE] = Rune.CreateSet(game, MARK, SCALING_DAMAGE, 'hard', function (i) {
    return function (obj, num) {
      obj.scalingDamage += num * 0.01 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1 * i + '% Damage';
    };
  });
  marks[SCALING_ATTACKRATE] = Rune.CreateSet(game, MARK, SCALING_ATTACKRATE, 'hard', function (i) {
    return function (obj, num) {
      obj.scalingAttackrate += num * 0.01 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1 * i + '% Attack Rate';
    };
  });
  marks[PENETRATION] = Rune.CreateSet(game, MARK, PENETRATION, 'marathon', function (i) {
    return function (obj, num) {
      obj.penetration += num * 0.02 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 2 * i + '% Damage to champions';
    };
  });
  runes[MARK] = marks;
  // Seals
  var seals = {};
  seals[MOVESPEED] = Rune.CreateSet(game, SEAL, MOVESPEED, 'medium', function (i) {
    return function (obj, num) {
      obj.movespeed += num * 1 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1 * i + ' Move Speed';
    };
  });
  seals[GOLD] = Rune.CreateSet(game, SEAL, GOLD, 'medium', function (i) {
    return function (obj, num) {
      obj.gold += num * 375 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 375 * i + ' Starting gold';
    };
  });
  seals[CHIME_CLICKING] = Rune.CreateSet(game, SEAL, CHIME_CLICKING, 'medium', function (i) {
    return function (obj, num) {
      obj.chimeClicking += num * 0.06 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 6 * i + '% Chimes per click';
    };
  });
  seals[SCALING_DEFENSE] = Rune.CreateSet(game, SEAL, SCALING_DEFENSE, 'hard', function (i) {
    return function (obj, num) {
      obj.scalingDefense += num * 0.015 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1.5 * i + '% Defense';
    };
  });
  seals[SCALING_MOVESPEED] = Rune.CreateSet(game, SEAL, SCALING_MOVESPEED, 'hard', function (i) {
    return function (obj, num) {
      obj.scalingMoveSpeed += num * 0.015 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1.5 * i + '% Move Speed';
    };
  });
  seals[SCALING_GOLD] = Rune.CreateSet(game, SEAL, SCALING_GOLD, 'marathon', function (i) {
    return function (obj, num) {
      obj.scalingGold += num * 0.01 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1 * i + '% Gold earned';
    };
  });
  runes[SEAL] = seals;
  // Glyphs;
  var glyphs = {};
  glyphs[SCALING_DAMAGE] = Rune.CreateSet(game, GLYPH, SCALING_DAMAGE, 'medium', function (i) {
    return function (obj, num) {
      obj.scalingDamage += num * 0.01 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1 * i + '% Damage';
    };
  });
  glyphs[DEFENSE] = Rune.CreateSet(game, GLYPH, DEFENSE, 'medium', function (i) {
    return function (obj, num) {
      obj.defense += num * 6 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 6 * i + ' Defense';
    };
  });
  glyphs[COOLDOWN_REDUCTION] = Rune.CreateSet(game, GLYPH, COOLDOWN_REDUCTION, 'medium', function (i) {
    return function (obj, num) {
      obj.cooldownReduction += num * (0.005 + 0.005 * i);
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + (0.5 + 0.5 * i) + '% CDR';
    };
  });
  glyphs[SCALING_DEFENSE] = Rune.CreateSet(game, GLYPH, SCALING_DEFENSE, 'hard', function (i) {
    return function (obj, num) {
      obj.scalingDefense += num * 0.01 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 1 * i + '% Defense';
    };
  });
  glyphs[CLICKING] = Rune.CreateSet(game, GLYPH, CLICKING, 'hard', function (i) {
    return function (obj, num) {
      obj.chimeClicking += num * 0.04 * i;
      obj.monsterClicking += num * 0.04 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 4 * i + '% Damage/Chimes per click';
    };
  });
  glyphs[SCALING_COOLDOWN_REDUCTION] = Rune.CreateSet(game, GLYPH, SCALING_COOLDOWN_REDUCTION, 'marathon', function (i) {
    return function (obj, num) {
      obj.scalingCooldownReduction += num * (0.01 + 0.005 * i);
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + (1 + 0.5 * i) + '% CDR at max level';
    };
  });
  runes[GLYPH] = glyphs;
  // Quints
  var quints = {};
  quints[SCALING_ATTACKRATE] = Rune.CreateSet(game, QUINT, SCALING_ATTACKRATE, 'hard', function (i) {
    return function (obj, num) {
      obj.scalingAttackrate += num * 0.03 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 3 * i + '% Attack Rate';
    };
  });
  quints[SCALING_MOVESPEED] = Rune.CreateSet(game, QUINT, SCALING_MOVESPEED, 'hard', function (i) {
    return function (obj, num) {
      obj.scalingMovespeed += num * 0.045 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 4.5 * i + '% Move Speed';
    };
  });
  quints[CLICKING] = Rune.CreateSet(game, QUINT, CLICKING, 'hard', function (i) {
    return function (obj, num) {
      obj.chimeClicking += num * 0.12 * i;
      obj.monsterClicking += num * 0.12 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 12 * i + '% Damage and Chimes per click';
    };
  });
  quints[PENETRATION] = Rune.CreateSet(game, QUINT, PENETRATION, 'marathon', function (i) {
    return function (obj, num) {
      obj.penetration += num * 0.06 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 6 * i + '% Damage to champions';
    };
  });
  quints[SCALING_GOLD] = Rune.CreateSet(game, QUINT, SCALING_GOLD, 'marathon', function (i) {
    return function (obj, num) {
      obj.scalingGold += num * 0.03 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 3 * i + '% Gold earned';
    };
  });
  quints[COOLDOWN_REDUCTION] = Rune.CreateSet(game, QUINT, COOLDOWN_REDUCTION, 'marathon', function (i) {
    return function (obj, num) {
      obj.cooldownReduction += num * (0.015 + 0.015 * i);
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + (1.5 + 1.5 * i) + '% CDR';
    };
  });
  quints[TEEMO_SLAYER] = Rune.CreateSet(game, QUINT, TEEMO_SLAYER, 'impossible', function (i) {
    return function (obj, num) {
      obj.teemoSlayer += num * 0.1 * i;
    };
  }, function (i) {
    return function (game) {
      return this.status == LOCKED ? this.getLockedText() : '+' + 10 * i + '% Damage to Teemo';
    };
  });
  runes[QUINT] = quints;
  return runes;
};
Rune.CreateStatsObject = function () {
  obj = {};
  // Rune variables
  obj.defense = 0;
  obj.movespeed = 0;
  obj.damage = 0;
  obj.attackrate = 0;
  obj.scalingDefense = 1;
  obj.scalingMovespeed = 1;
  obj.scalingDamage = 1;
  obj.scalingAttackrate = 1;
  obj.gold = 0;
  obj.scalingGold = 1;
  obj.chimeClicking = 1;
  obj.monsterClicking = 1;
  obj.cooldownReduction = 0;
  obj.scalingCooldownReduction = 0;
  obj.penetration = 1;
  obj.teemoSlayer = 1;
  return obj;
};
var Spell = function (game, duration, cooldown, type, target, start, end, unlock, tooltip) {
  this.Init(game, duration, cooldown, type, target, start, end, unlock, tooltip);
};
Spell.prototype.Init = function (game, duration, cooldown, type, target, start, end, unlock, tooltip) {
  this.game = game;
  this.duration = duration;
  this.durationLeft = 0;
  this.cooldown = cooldown;
  this.cooldownLeft = 0;
  this.type = type;
  this.target = target;
  // callbacks
  this.start = start;
  this.end = end;
  this.unlock = unlock;
  this.tooltip = tooltip;
  this.status = LOCKED;
};
Spell.prototype.getSpellTime = function () {
  var time = 0;
  if (this.status == ACTIVE)
    time = this.durationLeft;
  else if (this.status == COOLDOWN)
    time = this.cooldownLeft;
  return time > 0 ? time.toFixed(0) : '';
};
Spell.Create = function (game) {
  var spells = {};
  // game, duration, cooldown, start, end, unlock, tooltip
  spells[SMITE] = new Spell(game, 0, 60, SPELL_ACTIVE, MONSTER_ALL, function (game) {
    if (!game.isMonsterChampion(game.monster)) {
      game.smiteBonus = 0.2;
      game.addDamage(game.getSmiteDamage(), true);
      showRing(SMITE, RING_DURATION);
      game.smiteBonus = 0;
      this.duration = 0;
    } else {
      game.smiteDamageRate = game.getSmiteDamage() / 5;
      showRing(CHALLENGING_SMITE, RING_DURATION);
      this.duration = 5;
    }
  }, function (game) {
    game.smiteDamageRate = 0;
  }, function (game) {
    return game.level >= 2;
  }, function (game) {
    return this.status == LOCKED ? '' : 'Deal <b>' + prettyIntBigCompact(game.getSmiteDamage()) + '</b> damage ' + (!game.isMonsterChampion(game.monster) ? 'instantly' : 'over 5 seconds') + '.  Damage scales with level and experience.</br></br>Non-champion kills with smite grant +20% gold.</br></br>' + Math.round(this.cooldown) + ' second cooldown. <b>(Q)</b>';
  });
  spells[GHOST] = new Spell(game, 10, 120, SPELL_ACTIVE, MONSTER_ALL, function (game) {
    game.ghostBonus = 1 + 1 * game.upgradeStats.ghostBonus;
  }, function (game) {
    game.ghostBonus = 1;
  }, function (game) {
    return game.level >= 4;
  }, function (game) {
    return this.status == LOCKED ? '' : '+' + 100 * game.upgradeStats.ghostBonus + '% chime gathering for 10 seconds.  </br></br>' + Math.round(this.cooldown) + ' second cooldown. <b>(W)</b>';
  });
  spells[HEAL] = new Spell(game, 7, 120, SPELL_ACTIVE, MONSTER_ALL, function (game) {
    game.healBonus = 5 * game.upgradeStats.healBonus;
    game.updateStats();
  }, function (game) {
    game.healBonus = 1;
  }, function (game) {
    return game.level >= 6;
  }, function (game) {
    return this.status == LOCKED ? '' : 5 * game.upgradeStats.healBonus + 'x chimes per click for 7 seconds.</br></br>' + Math.round(this.cooldown) + ' second cooldown. <b>(E)</b>';
  });
  spells[FLASH] = new Spell(game, 0, 180, SPELL_ACTIVE, MONSTER_ALL, function (game) {
    game.addMeeps(Math.ceil(game.meepsEarned * game.flashBonus * game.upgradeStats.flashBonus), true);
    showRing(FLASH, RING_DURATION);
  }, function (game) {
  }, function (game) {
    return game.level >= 10;
  }, function (game) {
    return this.status == LOCKED ? '' : '+' + Math.round(100 * game.flashBonus * game.upgradeStats.flashBonus) + '% meeps earned from chimes.</br>(<b>' + prettyIntBigCompact(Math.ceil(game.meepsEarned * game.flashBonus * game.upgradeStats.flashBonus)) + '</b>)</br></br>' + Math.round(this.cooldown) + ' second cooldown. <b>(R)</b>';
  });
  spells[TELEPORT] = new Spell(game, 0, 300, SPELL_ACTIVE, MONSTER_ALL, function (game) {
  }, function (game) {
    var cooldownSpells = game.getObjectsByStatus(game.spells, COOLDOWN);
    var len = cooldownSpells.length;
    var spell, i;
    for (i = 0; i < len; i++) {
      spell = game.spells[cooldownSpells[i]];
      spell.cooldownLeft = 0;
      spell.status = AVAILABLE;
    }
    var activeSpells = game.getObjectsByStatus(game.spells, ACTIVE);
    len = activeSpells.length;
    for (i = 0; i < len; i++) {
      spell = game.spells[activeSpells[i]];
      spell.durationLeft += spell.duration;
    }
  }, function (game) {
    return game.level >= 13;
  }, function (game) {
    return this.status == LOCKED ? '' : 'Reset cooldowns of all spells.  </br></br>' + Math.round(this.cooldown) + ' second cooldown. <b>(T)</b>';
  });
  spells[EXHAUST] = new Spell(game, 10, 120, SPELL_ACTIVE, MONSTER_CHAMPION, function (game) {
    game.exhaustBonus = 1 + 1 * game.upgradeStats.exhaustBonus;
  }, function (game) {
    game.exhaustBonus = 1;
  }, function (game) {
    return game.level >= 16;
  }, function (game) {
    return this.status == LOCKED ? '' : '+' + 100 * game.upgradeStats.exhaustBonus + ' damage dealt for 10 seconds.  Only works against champions.  </br></br>' + Math.round(this.cooldown) + ' second cooldown. <b>(Y)</b>';
  });
  spells[IGNITE] = new Spell(game, 0, 120, SPELL_ACTIVE, MONSTER_ALL, function (game) {
    game.igniteBonus += 0.05 * game.upgradeStats.igniteBonus;
    game.updateStats();
    showRing(IGNITE + '1', RING_DURATION);
  }, function (game) {
    showRing(IGNITE + '2', RING_DURATION);
  }, function (game) {
    return game.level >= 17;
  }, function (game) {
    return this.status == LOCKED ? '' : '+' + Math.round(5  * game.upgradeStats.igniteBonus) + '% damage from items.</br>(<b>' + prettyIntBigCompact(Math.ceil(game.damageBought * 0.05 * game.upgradeStats.igniteBonus)) + '</b>)</br></br>' + Math.round(this.cooldown) + ' second cooldown. <b>(U)</b>';
  });
  spells[SPOILS_OF_WAR] = new Spell(game, 0, 45, SPELL_PASSIVE, MONSTER_JUNGLE, function (game) {
    game.spoilsOfWarActive = 1;
    game.killMonster();
    game.spoilsOfWarActive = 0;
    showRing(SPOILS_OF_WAR, RING_DURATION);
  }, function (game) {
  }, function (game) {
    return game.upgrades[FACE_OF_THE_MOUNTAIN].status == PURCHASED;
  }, function (game) {
    return this.status == LOCKED ? '' : 'Execute monsters below 20% max health on click, gaining <b>+' + (game.spoilsOfWarBonus * 100).toFixed(1) + '%</b> reward gold.  Gold scales with Relic Shields owned.  Does not work against champions. </br></br>' + Math.round(this.cooldown) + ' second cooldown.';
  });
  spells[FAVOR] = new Spell(game, 0, 0, SPELL_PASSIVE, MONSTER_ALL, function (game) {
  }, function (game) {
  }, function (game) {
    return game.upgrades[TALISMAN_OF_ASCENSION].status == PURCHASED;
  }, function (game) {
    return game.spells[FAVOR].status == LOCKED ? '' : 'Passively gain <b>+' + (game.favorBonus * 100).toFixed(1) + '%</b> gold from kills.  Gold scales with Ancient Coins owned. </br></br>No cooldown.';
  });
  spells[TRIBUTE] = new Spell(game, 0, 40, SPELL_PASSIVE, MONSTER_ALL, function (game) {
    var monster = game.monsters[game.monster];
    var gold = Math.ceil(monster.gold * game.tributeBonus);
    gold /= game.monster == TEEMO ? 15 : 1;
    game.addGold(gold);
    game.progress.spells[TRIBUTE].goldGained += gold;
    if (monster.type == MONSTER_CHAMPION) {
      game.addDamage((game.damageRate - game.smiteDamageRate) * 4);
    }
    showRing(TRIBUTE, RING_DURATION);
  }, function (game) {
  }, function (game) {
    return game.upgrades[FROST_QUEENS_CLAIM].status == PURCHASED;
  }, function (game) {
    if (this.status == LOCKED)
      return '';
    else if (game.monster == TEEMO)
      return 'Gain <b>' + (game.tributeBonus * 100 / 15).toFixed(1) + '%</b> of reward gold on next Teemo click.  Gold scales with Spellthief\'s Edges owned.</br></br>Deals <b>' + prettyIntBigCompact(game.damageStat * game.attackrateStat * game.exhaustBonus * 5, 1) + '</b> bonus damage (scales with DPS).</br></br>' + Math.round(this.cooldown) + ' second cooldown.';
    else
      return 'Gain <b>' + (game.tributeBonus * 100).toFixed(1) + '%</b> of reward gold on next monster click.  Gold scales with Spellthief\'s Edges owned.</br></br>Deals <b>' + prettyIntBigCompact((game.damageRate - game.smiteDamageRate) * 4, 1) + '</b> bonus damage to champions (scales with DPS).</br></br>' + Math.round(this.cooldown) + ' second cooldown.';
  });
  return spells;
};

var Upgrade = function(game, item, cost, level, defenseStat, movespeedStat, damageStat, attackrateStat, income, requirements, activate, deactivate, tooltip) {
  this.Init(game, item, cost, level, defenseStat, movespeedStat, damageStat, attackrateStat, income, requirements, activate, deactivate, tooltip);
};

Upgrade.prototype.Init = function(game, item, cost, level, defenseStat, movespeedStat, damageStat, attackrateStat, income, requirements, activate, deactivate, tooltip) {
  this.game = game;
  this.item = item;
  this.cost = cost;
  this.level = level;
  this.defenseStat = defenseStat;
  this.movespeedStat = movespeedStat;
  this.damageStat = damageStat;
  this.attackrateStat = attackrateStat;
  this.income = income;

  this.unlock = function(game) {
    if (game.level < this.level)
      return false;
    if (!this.requirements || !this.requirements.length)
      return true;
    for (var i = 0; i < this.requirements.length; i++) {
      if (game.upgrades[this.requirements[i]].status != PURCHASED)
        return false;
    }
    return true;
  };

  this.activate = activate;
  this.deactivate = deactivate;
  this.tooltip = tooltip;

  this.status = LOCKED;
};

Upgrade.prototype.isZero = function(stat) {
  return this[stat] ? '' : 'upgrade-zero';
};

Upgrade.Create = function(game) {
  var upgrades = {};

  // Ancient Coin /////////////////////////////////////////
  upgrades[NOMADS_MEDALLION] = new Upgrade(game, ANCIENT_COIN,            15000, 4, 0, 1, 0, 0, 15, [],
    function(game) {
      game.upgradeStats.goldBonus += 0.03;
      game.upgradeStats.priceBonus += 0.015;
      game.updateItemPrices();
    },
    function(game) {
      game.upgradeStats.goldBonus -= 0.03;
      game.upgradeStats.priceBonus -= 0.015;
      game.updateItemPrices();
    },
    function(game) {
      return "+3% gold earned, +1.5% item costs.";
    }
  );
  upgrades[TALISMAN_OF_ASCENSION] = new Upgrade(game, ANCIENT_COIN,       9000000, 8, 0, 4, 0, 2, 180, [NOMADS_MEDALLION],
    function(game) {
      game.upgradeStats.goldBonus -= 0.015;
      game.upgradeStats.priceBonus -= 0.03;
      game.updateItemPrices();
    },
    function(game) {
      game.upgradeStats.goldBonus += 0.015;
      game.upgradeStats.priceBonus += 0.03;
      game.updateItemPrices();
    },
    function(game) {
      return "-1.5% gold earned, -3% item costs.";
    }
  );

  // Spellthief's Edge ////////////////////////////////////
  upgrades[FROSTFANG] = new Upgrade(game, SPELLTHIEFS_EDGE,               10000, 4, 0, 0, 20, 0, 7, [],
    function(game) {
      game.upgradeStats.goldBonus += 0.03;
      game.upgradeStats.damageBonus -= 0.015;
    },
    function(game) {
      game.upgradeStats.goldBonus -= 0.03;
      game.upgradeStats.damageBonus += 0.015;
    },
    function(game) {
      return "+3% gold earned, -1.5% damage dealt.";
    }
  );
  upgrades[FROST_QUEENS_CLAIM] = new Upgrade(game, SPELLTHIEFS_EDGE,      6000000, 8, 0, 0, 70, 2, 90, [FROSTFANG],
    function(game) {
      game.upgradeStats.goldBonus -= 0.015;
      game.upgradeStats.damageBonus += 0.03;
    },
    function(game) {
      game.upgradeStats.goldBonus += 0.015;
      game.upgradeStats.damageBonus -= 0.03;
    },
    function(game) {
      return "-1.5% gold earned, +3% damage dealt.";
    }
  );

  // Relic Shield /////////////////////////////////////////
  upgrades[TARGONS_BRACE] = new Upgrade(game, RELIC_SHIELD,               10000, 4, 5, 0, 0, 0, 4, [],
    function(game) {
      game.upgradeStats.goldBonus += 0.03;
      game.upgradeStats.chimeBonus -= 0.03;
    },
    function(game) {
      game.upgradeStats.goldBonus -= 0.03;
      game.upgradeStats.chimeBonus += 0.03;
    },
    function(game) {
      return "+3% gold earned, -3% chimes gathered.";
    }
  );
  upgrades[FACE_OF_THE_MOUNTAIN] = new Upgrade(game, RELIC_SHIELD,        6000000, 8, 18, 0, 0, 2, 85, [TARGONS_BRACE],
    function(game) {
      game.upgradeStats.goldBonus -= 0.015;
      game.upgradeStats.chimeBonus += 0.06;
    },
    function(game) {
      game.upgradeStats.goldBonus += 0.015;
      game.upgradeStats.chimeBonus -= 0.06;
    },
    function(game) {
      return "-1.5% gold earned, +6% chimes gathered.";
    }
  );

  // Boots of Speed ///////////////////////////////////////
  upgrades[BOOTS_OF_SWIFTNESS] = new Upgrade(game, BOOTS_OF_SPEED,        40000, 5, 0, 2, 0, 0, 0, [],
    function(game) {
      game.upgradeStats.chimeBonus += 0.05;
    },
    function(game) {
      game.upgradeStats.chimeBonus -= 0.05;
    },
    function(game) {
      return "+5% chimes gathered.";
    }
  );
  upgrades[NINJA_TABI] = new Upgrade(game, BOOTS_OF_SPEED,                1000000, 7, 5, 3, 0, 0, 0, [],
    function(game) {
      game.upgradeStats.chimeClickPercent += 0.05;
    },
    function(game) {
      game.upgradeStats.chimeClickPercent -= 0.05;
    },
    function(game) {
      return "Chime clicks gather 5% CPS bonus chimes.";
    }
  );
  upgrades[IONIAN_BOOTS_OF_LUCIDITY] = new Upgrade(game, BOOTS_OF_SPEED,  20000000, 9, 0, 4, 0, 1, 0, [],
    function(game) {
      game.upgradeStats.cooldownReduction += 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      game.upgradeStats.cooldownReduction -= 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      return "5% spell cooldown reduction.";
    }
  );
  upgrades[BOOTS_OF_MOBILITY] = new Upgrade(game, BOOTS_OF_SPEED,         500000000, 11, 0, 10, 0, 0, 0, [],
    function(game) {
      game.upgradeStats.chimeBonus += 0.1;
      game.upgradeStats.damageBonus -= 0.02;
    },
    function(game) {
      game.upgradeStats.chimeBonus -= 0.1;
      game.upgradeStats.damageBonus += 0.02;
    },
    function(game) {
      return "+10% chimes gathered, -2% damage dealt.";
    }
  );
  upgrades[MERCURYS_TREADS] = new Upgrade(game, BOOTS_OF_SPEED,           12000000000, 13, 45, 10, 0, 0, 0, [],
    function(game) {
      game.upgradeStats.flashBonus += 0.34;
    },
    function(game) {
      game.upgradeStats.flashBonus -= 0.34;
    },
    function(game) {
      return "Flash grants 33% more meeps.";
    }
  );
  upgrades[SORCERERS_SHOES] = new Upgrade(game, BOOTS_OF_SPEED,           400000000000, 15, 0, 10, 200, 0, 0, [],
    function(game) {
      game.upgradeStats.monsterClickPercent += 0.03;
    },
    function(game) {
      game.upgradeStats.monsterClickPercent -= 0.03;
    },
    function(game) {
      return "Monster clicks deal 3% DPS bonus damage.";
    }
  );
  upgrades[BERSERKERS_GREAVES] = new Upgrade(game, BOOTS_OF_SPEED,        10000000000000, 17, 0, 10, 0, 4, 0, [],
    function(game) {
      game.upgradeStats.igniteBonus += 0.4;
    },
    function(game) {
      game.upgradeStats.igniteBonus -= 0.4;
    },
    function(game) {
      return "Ignite grants 40% more bonus damage.";
    }

  );

  // Ruby Crystal /////////////////////////////////////////
  upgrades[CRYSTALLINE_BRACER] = new Upgrade(game, RUBY_CRYSTAL,          80000, 5, 15, 0, 0, 0, 0, [],
    function(game) {
      game.upgradeStats.chimeClickBonus += 0.3;
    },
    function(game) {
      game.upgradeStats.chimeClickBonus -= 0.3;
    },
    function(game) {
      return "Chime clicks gather 30% more chimes.";
    }
  );
  upgrades[KINDLEGEM] = new Upgrade(game, RUBY_CRYSTAL,                   2000000, 7, 15, 0, 0, 1, 0, [],
    function(game) {
      game.upgradeStats.cooldownReduction += 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      game.upgradeStats.cooldownReduction -= 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      return "5% spell cooldown reduction.";
    }
  );
  upgrades[GIANTS_BELT] = new Upgrade(game, RUBY_CRYSTAL,                 35000000, 9, 40, 0, 0, 0, 0, [],
    function(game) {
      game.upgradeStats.chimeBonus += 0.05;
    },
    function(game) {
      game.upgradeStats.chimeBonus -= 0.05;
    },
    function(game) {
      return "+5% chimes gathered.";
    }
  );
  upgrades[WARMOGS_ARMOR] = new Upgrade(game, RUBY_CRYSTAL,               750000000, 11, 70, 0, 0, 0, 0, [GIANTS_BELT],
    function(game) {
      game.upgradeStats.warmogBonus = 1.1;
    },
    function(game) {
      game.upgradeStats.warmogBonus = 1;
    },
    function(game) {
      return "+10% chimes gathered. Disabled for 6 seconds upon monster click.";
    }
  );
  upgrades[RIGHTEOUS_GLORY] = new Upgrade(game, RUBY_CRYSTAL,             18000000000, 13, 70, 5, 0, 0, 0, [CRYSTALLINE_BRACER],
    function(game) {
      game.upgradeStats.ghostBonus += 0.5;
    },
    function(game) {
      game.upgradeStats.ghostBonus -= 0.5;
    },
    function(game) {
      return "Ghost bonus increased to +150% chime gathering.";
    }
  );
  upgrades[SPIRIT_VISAGE] = new Upgrade(game, RUBY_CRYSTAL,               600000000000, 15, 120, 0, 0, 4, 0, [KINDLEGEM],
    function(game) {
      game.upgradeStats.healBonus += 1;
    },
    function(game) {
      game.upgradeStats.healBonus -= 1;
    },
    function(game) {
      return "Heal bonus increased to 10x chimes per click.";
    }
  );
  upgrades[FROZEN_MALLET] = new Upgrade(game, RUBY_CRYSTAL,               15000000000000, 17, 160, 0, 200, 0, 0, [GIANTS_BELT],
    function(game) {
      game.upgradeStats.frozenBonus += 0.05;
    },
    function(game) {
      game.upgradeStats.frozenBonus -= 0.05;
    },
    function(game) {
      return "Monster clicks increase damage dealt by 5% for 2 seconds.";
    }
  );

  // Amplifying Tome //////////////////////////////////////
  upgrades[FIENDISH_CODEX] = new Upgrade(game, AMPLIFYING_TOME,           300000, 6, 0, 0, 50, 1, 0, [],
    function(game) {
      game.upgradeStats.cooldownReduction += 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      game.upgradeStats.cooldownReduction -= 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      return "+5% spell cooldown reduction.";
    }
  );
  upgrades[AETHER_WISP] = new Upgrade(game, AMPLIFYING_TOME,              7500000, 8, 0, 2, 100, 0, 0, [],
    function(game) {
      game.upgradeStats.aetherBonus += 0.3;
    },
    function(game) {
      game.upgradeStats.aetherBonus -= 0.3;
    },
    function(game) {
      return "Spell casts increase chimes gathered by 30% for 3 seconds.";
    }
  );
  upgrades[NEEDLESSLY_LARGE_ROD] = new Upgrade(game, AMPLIFYING_TOME,     150000000, 10, 0, 0, 200, 0, 0, [],
    function(game) {
      game.upgradeStats.monsterClickBonus += 0.3;
    },
    function(game) {
      game.upgradeStats.monsterClickBonus -= 0.3;
    },
    function(game) {
      return "Monster clicks deal 30% more damage.";
    }
  );
  upgrades[MORELLONOMICON] = new Upgrade(game, AMPLIFYING_TOME,           4000000000, 12, 0, 0, 200, 4, 0, [FIENDISH_CODEX],
    function(game) {
      game.upgradeStats.morelloBonus += 0.04;
    },
    function(game) {
      game.upgradeStats.morelloBonus -= 0.04;
    },
    function(game) {
      return "+4% damage dealt to monsters below 40% health.";
    }
  );
  upgrades[LUDENS_ECHO] = new Upgrade(game, AMPLIFYING_TOME,              75000000000, 14, 0, 3, 250, 0, 0, [NEEDLESSLY_LARGE_ROD],
    function(game) {
    },
    function(game) {
      game.upgradeStats.ludenCount = 0;
    },
    function(game) {
      return "After 6 spell casts, next monster click deals 3x DPS bonus damage.";
    }
  );
  upgrades[RYLAIS_CRYSTAL_SCEPTER] = new Upgrade(game, AMPLIFYING_TOME,   2000000000000, 16, 50, 0, 350, 0, 0, [NEEDLESSLY_LARGE_ROD],
    function(game) {
      game.upgradeStats.rylaiBonus += 0.06;
    },
    function(game) {
      game.upgradeStats.rylaiBonus -= 0.06;
    },
    function(game) {
      return "Spell casts increase damage dealt by 6% for 4 seconds.";
    }
  );
  upgrades[RABADONS_DEATHCAP] = new Upgrade(game, AMPLIFYING_TOME,        40000000000000, 18, 0, 0, 800, 0, 0, [NEEDLESSLY_LARGE_ROD],
    function(game) {
      game.upgradeStats.rabadonBonus += 0.06;
    },
    function(game) {
      game.upgradeStats.rabadonBonus -= 0.06;
    },
    function(game) {
      return "+6% damage from items. Scales with ignite.";
    }
  );

  // Dagger ///////////////////////////////////////////////
  upgrades[RECURVE_BOW] = new Upgrade(game, DAGGER,                       350000, 6, 0, 0, 0, 2, 0, [],
    function(game) {
      game.upgradeStats.damageBonus += 0.02;
    },
    function(game) {
      game.upgradeStats.damageBonus -= 0.02;
    },
    function(game) {
      return "+2% damage dealt.";
    }
  );
  upgrades[RUNAANS_HURRICANE] = new Upgrade(game, DAGGER,                 9000000, 8, 0, 0, 30, 3, 0, [RECURVE_BOW],
    function(game) {
      game.upgradeStats.monsterClickPercent += 0.03;
    },
    function(game) {
      game.upgradeStats.monsterClickPercent -= 0.03;
    },
    function(game) {
      return "Monster clicks deal 3% DPS bonus damage.";
    }
  );
  upgrades[ZEAL] = new Upgrade(game, DAGGER,                              450000000, 10, 0, 3, 0, 4, 0, [],
    function(game) {
      game.upgradeStats.chimeClickPercent += 0.05;
    },
    function(game) {
      game.upgradeStats.chimeClickPercent -= 0.05;
    },
    function(game) {
      return "Chime clicks gather 5% CPS bonus chimes.";
    }
  );
  upgrades[WITS_END] = new Upgrade(game, DAGGER,                          9000000000, 12, 50, 0, 60, 5, 0, [RECURVE_BOW],
    function(game) {
    },
    function(game) {
      game.upgradeStats.witCount = 0;
    },
    function(game) {
      return "Monster clicks grant 2% bonus chime gathering for 3 seconds, stacking up to 5 times.";
    }
  );
  upgrades[STATIKK_SHIV] = new Upgrade(game, DAGGER,                      150000000000, 14, 0, 3, 90, 5, 0, [ZEAL],
    function(game) {
    },
    function(game) {
      game.upgradeStats.statikkCount = 0;
    },
    function(game) {
      return "Every 40 monster clicks, deal 2x DPS bonus damage.";
    }
  );
  upgrades[PHANTOM_DANCER] = new Upgrade(game, DAGGER,                    4500000000000, 16, 0, 4, 0, 10, 0, [ZEAL],
    function(game) {
      game.upgradeStats.exhaustBonus += 0.5;
    },
    function(game) {
      game.upgradeStats.exhaustBonus -= 0.5;
    },
    function(game) {
      return "Exhaust bonus increased to +150% damage dealt.";
    }
  );
  upgrades[TRINITY_FORCE] = new Upgrade(game, DAGGER,                     100000000000000, 18, 100, 5, 220, 20, 0, [ZEAL],
    function(game) {
      game.upgradeStats.chimeBonus += 0.02;
      game.upgradeStats.damageBonus += 0.01;
      game.upgradeStats.cooldownReduction += 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      game.upgradeStats.chimeBonus -= 0.02;
      game.upgradeStats.damageBonus -= 0.01;
      game.upgradeStats.cooldownReduction -= 0.05;
      game.calculateCooldownReduction();
    },
    function(game) {
      return "+2% chimes gathered, +1% damage dealt, +5% cooldown reduction.";
    }
  );

  return upgrades;
};

Upgrade.CreateStatsObject = function() {
  var obj = {};

  obj.goldBonus = 1;
  obj.priceBonus = 1;

  obj.chimeBonus = 1;
  obj.damageBonus = 1;

  obj.chimeClickBonus = 1;
  obj.monsterClickBonus = 1;

  obj.chimeClickPercent = 0;
  obj.monsterClickPercent = 0;

  obj.cooldownReduction = 0;

  obj.flashBonus = 1;
  obj.healBonus = 1;
  obj.ghostBonus = 1;
  obj.exhaustBonus = 1;
  obj.igniteBonus = 1;

  obj.aetherBonus = 1;
  obj.warmogBonus = 1;
  obj.frozenBonus = 1;
  obj.morelloBonus = 1;
  obj.rylaiBonus = 1;
  obj.rabadonBonus = 1;

  obj.ludenCount = 0;
  obj.statikkCount = 0;
  obj.witCount = 0;

  obj.aetherTime = 0;
  obj.warmogTime = 0;
  obj.frozenTime = 0;
  obj.rylaiTime = 0;
  obj.witTime = 0;

  return obj;
};
